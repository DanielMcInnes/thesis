format 222
"websocketpp http parser" // http::websocketpp http parser
  revision 1
  modified_by 2 "dmcinnes"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "/home/dmcinnes/git/websocketpp/websocketpp/http/"
  cpp_src_dir "/home/dmcinnes/git/websocketpp/websocketpp/http/"
  cpp_namespace "websocketpp::http::parser"
  classview 128642 "http"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 128898 "header_list"
      visibility package stereotype "typedef" explicit_base_type "std::map<std::string, std::string, utility::ci_less >"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 129026 "parser"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ Base HTTP parser

Includes methods and data elements common to all types of HTTP messages such
as headers, versions, bodies, etc.
"
      operation 128386 "parser"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : m_header_bytes(0)
      , m_body_bytes_needed(0)
      , m_body_bytes_max(max_body_size)
      , m_body_encoding(body_encoding::unknown) {};
"
	
	
	
	
      end

      operation 128514 "get_version"
	const constvalue cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_version;
    };
"
	
	
	
	
	comment "/ Get the HTTP version string

@return The version string for this parser
"
      end

      operation 128642 "set_version"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "version" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Set HTTP parser Version

Input should be in format: HTTP/x.y where x and y are positive integers.
@todo Does this method need any validation?

@param [in] version The value to set the HTTP version to.
"
      end

      operation 128770 "get_header"
	preserve_cpp_body_indent const constvalue cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "key" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Get the value of an HTTP header

@todo Make this method case insensitive.

@param [in] key The name/key of the header to get.
@return The value associated with the given HTTP header key.
"
      end

      operation 128898 "get_header_as_plist"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "key" explicit_type "std::string"
	  param inout name "out" type class_ref 128130 // parameter_list
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Extract an HTTP parameter list from a parser header.

If the header requested doesn't exist or exists and is empty the
parameter list is valid (but empty).

@param [in] key The name/key of the HTTP header to use as input.
@param [out] out The parameter list to store extracted parameters in.
@return Whether or not the input was a valid parameter list.
"
      end

      operation 129026 "get_headers"
	preserve_cpp_body_indent const constvalue cpp_inline public return_type class_ref 128898 // header_list
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Return a list of all HTTP headers

Return a list of all HTTP headers

@since 0.8.0

@return A list of all HTTP headers
"
      end

      operation 129154 "append_header"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "std::string"
	  param in name "val" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Append a value to an existing HTTP header

This method will set the value of the HTTP header `key` with the
indicated value. If a header with the name `key` already exists, `val`
will be appended to the existing value.

@todo Make this method case insensitive.
@todo Should there be any restrictions on which keys are allowed?
@todo Exception free varient

@see replace_header

@param [in] key The name/key of the header to append to.
@param [in] val The value to append.
"
      end

      operation 129282 "replace_header"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "std::string"
	  param in name "val" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Set a value for an HTTP header, replacing an existing value

This method will set the value of the HTTP header `key` with the
indicated value. If a header with the name `key` already exists, `val`
will replace the existing value.

@todo Make this method case insensitive.
@todo Should there be any restrictions on which keys are allowed?
@todo Exception free varient

@see append_header

@param [in] key The name/key of the header to append to.
@param [in] val The value to append.
"
      end

      operation 129410 "remove_header"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "key" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Remove a header from the parser

Removes the header entirely from the parser. This is different than
setting the value of the header to blank.

@todo Make this method case insensitive.

@param [in] key The name/key of the header to remove.
"
      end

      operation 129538 "get_body"
	const constvalue cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_body;
    };
"
	
	
	
	
	comment "/ Get HTTP body

Gets the body of the HTTP object

@return The body of the HTTP message.
"
      end

      operation 129666 "set_body"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Set body content

Set the body content of the HTTP response to the parameter string. Note
set_body will also set the Content-Length HTTP header to the appropriate
value. If you want the Content-Length header to be something else, do so
via replace_header(\"Content-Length\") after calling set_body()

@param value String data to include as the body content.
"
      end

      operation 129794 "get_max_body_size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_body_bytes_max;
    };
"
	
	
	
	
	comment "/ Get body size limit

Retrieves the maximum number of bytes to parse & buffer before canceling
a request.

@since 0.5.0

@return The maximum length of a message body.
"
      end

      operation 129922 "set_max_body_size"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_body_bytes_max = value;
    };
"
	
	
	
	
	comment "/ Set body size limit

Set the maximum number of bytes to parse and buffer before canceling a
request.

@since 0.5.0

@param value The size to set the max body length to.
"
      end

      operation 130050 "parse_parameter_list"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "in" explicit_type "std::string"
	  param inout name "out" type class_ref 128130 // parameter_list
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Extract an HTTP parameter list from a string.

@param [in] in The input string.
@param [out] out The parameter list to store extracted parameters in.
@return Whether or not the input was a valid parameter list.
"
      end

      operation 130178 "process_header"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "std::string::iterator"
	  param in name "end" explicit_type "std::string::iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Process a header line

@todo Update this method to be exception free.

@param [in] begin An iterator to the beginning of the sequence.
@param [in] end An iterator to the end of the sequence.
"
      end

      operation 130306 "prepare_body"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Prepare the parser to begin parsing body data

Inspects headers to determine if the message has a body that needs to be
read. If so, sets up the necessary state, otherwise returns false. If
this method returns true and loading the message body is desired call
`process_body` until it returns zero bytes or an error.

Must not be called until after all headers have been processed.

@since 0.5.0

@return True if more bytes are needed to load the body, false otherwise.
"
      end

      operation 130434 "process_body"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "size_t"
	nparams 2
	  param in name "buf" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Process body data

Parses body data.

@since 0.5.0

@param [in] begin An iterator to the beginning of the sequence.
@param [in] end An iterator to the end of the sequence.
@return The number of bytes processed
"
      end

      operation 130562 "body_ready"
	const cpp_inline protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return (m_body_bytes_needed == 0);
    };
"
	
	
	
	
	comment "/ Check if the parser is done parsing the body

Behavior before a call to `prepare_body` is undefined.

@since 0.5.0

@return True if the message body has been completed loaded.
"
      end

      operation 130690 "raw_headers"
	preserve_cpp_body_indent const cpp_inline protected explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Generate and return the HTTP headers as a string

Each headers will be followed by the \\r\\n sequence including the last one.
A second \\r\\n sequence (blank header) is not appended by this method

@return The HTTP headers as a string.
"
      end

      attribute 135426 "m_version"
	protected explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 128258 // m_headers (<directional composition>)
	relation 128258 *-->
	  a role_name "m_headers" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128258 // m_headers (<directional composition>)
	  b parent class_ref 128898 // header_list
      end

      attribute 135554 "m_header_bytes"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 135682 "m_body"
	protected explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 135810 "m_body_bytes_needed"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 135938 "m_body_bytes_max"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 128386 // m_body_encoding (<directional composition>)
	relation 128386 *-->
	  a role_name "m_body_encoding" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128386 // m_body_encoding (<directional composition>)
	  b parent class_ref 128770 // value
      end
    end

    class 129154 "request"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ Stores, parses, and manipulates HTTP requests

http::request provides the following functionality for working with HTTP
requests.

- Initialize request via manually setting each element
- Initialize request via reading raw bytes and parsing
- Once initialized, access individual parsed elements
- Once initialized, read entire request as raw bytes
"
      classrelation 128514 // <generalisation>
	relation 128514 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128514 // <generalisation>
	  b parent class_ref 129026 // parser
      end

      class 129282 "type"
	visibility package stereotype "typedef" base_type class_ref 129154 // request
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 128642 // <dependency>
	  relation 128642 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 128642 // <dependency>
	    b parent class_ref 129154 // request
	end
      end

      class 129410 "ptr"
	visibility package stereotype "typedef" base_type class_ref 129282 // type
	cpp_decl "${comment}typedef lib::shared_ptr<${type}> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 128770 // <dependency>
	  relation 128770 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 128770 // <dependency>
	    b parent class_ref 129282 // type
	end
      end

      operation 130818 "request"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : m_buf(lib::make_shared<std::string>())
      , m_ready(false) {};
"
	
	
	
	
      end

      operation 130946 "consume"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "size_t"
	nparams 2
	  param in name "buf" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Process bytes in the input buffer

Process up to len bytes from input buffer buf. Returns the number of
bytes processed. Bytes left unprocessed means bytes left over after the
final header delimiters.

Consume is a streaming processor. It may be called multiple times on one
request and the full headers need not be available before processing can
begin. If the end of the request was reached during this call to consume
the ready flag will be set. Further calls to consume once ready will be
ignored.

Consume will throw an http::exception in the case of an error. Typical
error reasons include malformed requests, incomplete requests, and max
header size being reached.

@param buf Pointer to byte buffer
@param len Size of byte buffer
@return Number of bytes processed.
"
      end

      operation 131074 "ready"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_ready;
    };
"
	
	
	
	
	comment "/ Returns whether or not the request is ready for reading."
      end

      operation 131202 "raw"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Returns the full raw request (including the body)"
      end

      operation 131330 "raw_head"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Returns the raw request headers only (similar to an HTTP HEAD request)"
      end

      operation 131458 "set_method"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "method" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Set the HTTP method. Must be a valid HTTP token"
      end

      operation 131586 "get_method"
	const constvalue cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_method;
    };
"
	
	
	
	
	comment "/ Return the request method"
      end

      operation 131714 "set_uri"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "uri" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Set the HTTP uri. Must be a valid HTTP uri"
      end

      operation 131842 "get_uri"
	const constvalue cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_uri;
    };
"
	
	
	
	
	comment "/ Return the requested URI"
      end

      operation 131970 "process"
	preserve_cpp_body_indent cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "std::string::iterator"
	  param in name "end" explicit_type "std::string::iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Helper function for message::consume. Process request line"
      end

      attribute 136066 "m_buf"
	private explicit_type "std::string"
	stereotype "lib::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136194 "m_method"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136322 "m_uri"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136450 "m_ready"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 129538 "response"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "/ Stores, parses, and manipulates HTTP responses

http::response provides the following functionality for working with HTTP
responses.

- Initialize response via manually setting each element
- Initialize response via reading raw bytes and parsing
- Once initialized, access individual parsed elements
- Once initialized, read entire response as raw bytes

http::response checks for header completeness separately from the full
response. Once the header is complete, the Content-Length header is read to
determine when to stop reading body bytes. If no Content-Length is present
ready() will never return true. It is the responsibility of the caller to
consume to determine when the response is complete (ie when the connection
terminates, or some other metric).
"
      classrelation 128898 // <generalisation>
	relation 128898 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 128898 // <generalisation>
	  b parent class_ref 129026 // parser
      end

      class 129666 "type"
	visibility package stereotype "typedef" base_type class_ref 129538 // response
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 129026 // <dependency>
	  relation 129026 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 129026 // <dependency>
	    b parent class_ref 129538 // response
	end
      end

      class 129794 "ptr"
	visibility package stereotype "typedef" base_type class_ref 129666 // type
	cpp_decl "${comment}typedef lib::shared_ptr<${type}> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 129154 // <dependency>
	  relation 129154 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 129154 // <dependency>
	    b parent class_ref 129666 // type
	end
      end

      operation 132098 "response"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : m_read(0)
      , m_buf(lib::make_shared<std::string>())
      , m_status_code(status_code::uninitialized)
      , m_state(RESPONSE_LINE) {};
"
	
	
	
	
      end

      operation 132226 "consume"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "size_t"
	nparams 2
	  param in name "buf" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Process bytes in the input buffer

Process up to len bytes from input buffer buf. Returns the number of
bytes processed. Bytes left unprocessed means bytes left over after the
final header delimiters.

Consume is a streaming processor. It may be called multiple times on one
response and the full headers need not be available before processing can
begin. If the end of the response was reached during this call to consume
the ready flag will be set. Further calls to consume once ready will be
ignored.

Consume will throw an http::exception in the case of an error. Typical
error reasons include malformed responses, incomplete responses, and max
header size being reached.

@param buf Pointer to byte buffer
@param len Size of byte buffer
@return Number of bytes processed.
"
      end

      operation 132354 "consume"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param inout name "s" explicit_type "std::istream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Process bytes in the input buffer (istream version)

Process bytes from istream s. Returns the number of bytes processed. 
Bytes left unprocessed means bytes left over after the final header
delimiters.

Consume is a streaming processor. It may be called multiple times on one
response and the full headers need not be available before processing can
begin. If the end of the response was reached during this call to consume
the ready flag will be set. Further calls to consume once ready will be
ignored.

Consume will throw an http::exception in the case of an error. Typical
error reasons include malformed responses, incomplete responses, and max
header size being reached.

@param buf Pointer to byte buffer
@param len Size of byte buffer
@return Number of bytes processed.
"
      end

      operation 132482 "ready"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_state == DONE;
    };
"
	
	
	
	
	comment "/ Returns true if the response is ready.

@note will never return true if the content length header is not present
"
      end

      operation 132610 "headers_ready"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return (m_state == BODY || m_state == DONE);
    };
"
	
	
	
	
	comment "/ Returns true if the response headers are fully parsed."
      end

      operation 132738 "raw"
	preserve_cpp_body_indent const cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Returns the full raw response"
      end

      operation 132866 "set_status"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "code" type class_ref 128258 // value
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Set response status code and message

Sets the response status code to `code` and looks up the corresponding
message for standard codes. Non-standard codes will be entered as Unknown
use set_status(status_code::value,std::string) overload to set both
values explicitly.

@param code Code to set
@param msg Message to set
"
      end

      operation 132994 "set_status"
	preserve_cpp_body_indent cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "code" type class_ref 128258 // value
	  param in name "msg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Set response status code and message

Sets the response status code and message to independent custom values.
use set_status(status_code::value) to set the code and have the standard
message be automatically set.

@param code Code to set
@param msg Message to set
"
      end

      operation 133122 "get_status_code"
	const cpp_inline public return_type class_ref 128258 // value
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_status_code;
    };
"
	
	
	
	
	comment "/ Return the response status code"
      end

      operation 133250 "get_status_msg"
	const constvalue cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_status_msg;
    };
"
	
	
	
	
	comment "/ Return the response status message"
      end

      operation 133378 "process"
	preserve_cpp_body_indent cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "begin" explicit_type "std::string::iterator"
	  param in name "end" explicit_type "std::string::iterator"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Helper function for consume. Process response line"
      end

      operation 133506 "process_body"
	preserve_cpp_body_indent cpp_inline private explicit_return_type "size_t"
	nparams 2
	  param in name "buf" explicit_type "char"
	  param in name "len" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${typeprefix}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${typeprefix}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Helper function for processing body bytes"
      end

      class 129922 "state"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 136578 "RESPONSE_LINE"
	  public type class_ref 129922 // state
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 136706 "HEADERS"
	  public type class_ref 129922 // state
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 136834 "BODY"
	  public type class_ref 129922 // state
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 136962 "DONE"
	  public type class_ref 129922 // state
	  init_value " 3
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 137090 "m_status_msg"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 137218 "m_read"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 137346 "m_buf"
	private explicit_type "std::string"
	stereotype "lib::shared_ptr"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 129282 // m_status_code (<directional composition>)
	relation 129282 *-->
	  a role_name "m_status_code" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129282 // m_status_code (<directional composition>)
	  b parent class_ref 128258 // value
      end

      classrelation 129410 // m_state (<directional composition>)
	relation 129410 *-->
	  a role_name "m_state" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129410 // m_state (<directional composition>)
	  b parent class_ref 129922 // state
      end
    end
  end

  deploymentview 128514 "websocketpp http parser"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 128514 "parser"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128898 // header_list
	class_ref 129026 // parser
      end
    end

    artifact 128642 "request"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129154 // request
      end
    end

    artifact 128770 "response"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129538 // response
      end
    end
  end
end
